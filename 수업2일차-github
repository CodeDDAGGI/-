// git 사용법

// git 복사 shift + insert

// git -v 버젼 체크
// git config --global user.name 사용자이름 체크 및 저장
// git config --global user.email 사용자 이메일 체크 및 저장
// git init  초기화
// git status 현재 깃의 로컬 상태 확인

// git add . 모든 내용을 올릴때
// git add 파일명 파일명을 올릴때  
// 작성 후 다시 git status로 파일을 확인

// git commit -m"사용자 정보 추가" -> 아이디 bOd8de5 
// git log -> 사용자 정보 내역 추가

// git checkout "아이디" -> 커밋된 시점으로 불러오기
// git reset 

// 문구
// modified 기존의 파일에 수정이 일어남
// new file 새로운 파일 추가댐
// HEAD 현재 저장 위치

// git remote add origin https://github.com/CodeDDAGGI/git_study.git 저장소의 주소를 추가
// origin 키워드


// 기존의 파일이 존재할 시 (깃허브에 레파지토리에 수정분이 있을경우)
// git fetch 깃허브랑 파일의 내용을 동일하게 상태를 만들어줌

// git pull 레파지토리에서 변경된 정보들 가져오기

// 작업한 파일 깃허브 업로드
// git add .
// git commit -m"ment"
// git push

// 깃허브에서 파일 가져오기
// 깃허브에서 파일을 받아오거나 할때 기존 파일이 없을시
// git clone 주소(파일이 없을 경우)


// git fetch  작동 안할때 git stash 파일 가져올떄
// git pull  파일 가져올떄

// 파일올릴떄
// git add .
// git commit -m"ment"
// git push



// 소스트리 
// git 저장소랑 비슷

// q 되돌아가기

// 팀프로젝트 시 깃허브 사용법

/*
1. Fork 및 Clone
: 팀원들은 원본 리포지토리를 Fork하고 자신의 GitHub 계정에 복사된 리포지토리를 로컬로 클론

$ git clone https://github.com/your-username/repository-name.git
$ cd repository-name

2. Upstream 원격 추가
: 원본 리포지토리의 변경 사항을 가져오기 위해 upstream 원격을 추가

$ git remote add upstream https://github.com/original-owner/repository-name.git
-----------------------------------------------------------------------------

3. 브랜치 생성 및 작업
: 각 팀원은 자신의 브랜치를 생성하고 그 브랜치에서 작업을 수행

브랜치 생성
$ git checkout -b feature-branch-name

작업 내용 커밋
$ git add .
$ git commit -m "작업 내용 설명"

자신의 GitHub 리포지토리에 푸시
$ git push origin feature-branch-name

4. 원본 리포지토리와 동기화

원본 리포지토리의 변경 사항 가져오기
$ git fetch upstream

로컬 메인 브랜치로 이동
$ git checkout main

원본 리포지토리의 변경 사항을 로컬 메일 브랜치에 병합
$ git merge upstream/main

=== 병합 후 충돌 해결 (필요한 경우) === 
충돌이 발생하면 충돌된 파일을 수정한 후 스테이징하고 커밋

-- 충돌 수정 후 --
$ git add 충돌된-파일
$ git commit -m "충돌 해결"

5. 브랜치에 변경 사항 반영

작업 브랜치로 돌아가기
$ git checkout feature-branch-name

메인 브랜치의 변경 사항을 작업 브랜치에 병합
$ git merge main

작업 브랜치의 변경사항을 다시 푸시
$ git push origin feature-branch-name
*/

