// git 사용법

// git 복사 shift + insert

// git -v 버젼 체크
// git config --global user.name 사용자이름 체크 및 저장
// git config --global user.email 사용자 이메일 체크 및 저장
// git init  초기화
// git status 현재 깃의 로컬 상태 확인

// git add . 모든 내용을 올릴때
// git add 파일명 파일명을 올릴때  
// 작성 후 다시 git status로 파일을 확인

// git commit -m"사용자 정보 추가" -> 아이디 bOd8de5 
// git log -> 사용자 정보 내역 추가

// git checkout "아이디" -> 커밋된 시점으로 불러오기
// git reset 

// 문구
// modified 기존의 파일에 수정이 일어남
// new file 새로운 파일 추가댐
// HEAD 현재 저장 위치

// git remote add origin https://github.com/CodeDDAGGI/git_study.git 저장소의 주소를 추가
// origin 키워드


// 기존의 파일이 존재할 시 (깃허브에 레파지토리에 수정분이 있을경우)
// git fetch 깃허브랑 파일의 내용을 동일하게 상태를 만들어줌

// git pull 레파지토리에서 변경된 정보들 가져오기

// 작업한 파일 깃허브 업로드
// git add .
// git commit -m"ment"
// git push

// 깃허브에서 파일 가져오기
// 깃허브에서 파일을 받아오거나 할때 기존 파일이 없을시
// git clone 주소(파일이 없을 경우)


// git fetch  작동 안할때 git stash 파일 가져올떄
// git pull  파일 가져올떄

// 파일올릴떄
// git add .
// git commit -m"ment"
// git push



// 소스트리 
// git 저장소랑 비슷

// q 되돌아가기

// 팀프로젝트 시 깃허브 사용법

/*
1. Fork 및 Clone
: 팀원들은 원본 리포지토리를 Fork하고 자신의 GitHub 계정에 복사된 리포지토리를 로컬로 클론

$ git clone https://github.com/your-username/repository-name.git
$ cd repository-name

2. Upstream 원격 추가
: 원본 리포지토리의 변경 사항을 가져오기 위해 upstream 원격을 추가

$ git remote add upstream https://github.com/original-owner/repository-name.git
-----------------------------------------------------------------------------

3. 브랜치 생성 및 작업
: 각 팀원은 자신의 브랜치를 생성하고 그 브랜치에서 작업을 수행

브랜치 생성
$ git checkout -b feature-branch-name

작업 내용 커밋
$ git add .
$ git commit -m "작업 내용 설명"

자신의 GitHub 리포지토리에 푸시
$ git push origin feature-branch-name

4. 원본 리포지토리와 동기화

원본 리포지토리의 변경 사항 가져오기
$ git fetch upstream

로컬 메인 브랜치로 이동
$ git checkout main

원본 리포지토리의 변경 사항을 로컬 메일 브랜치에 병합
$ git merge upstream/main

=== 병합 후 충돌 해결 (필요한 경우) === 
충돌이 발생하면 충돌된 파일을 수정한 후 스테이징하고 커밋

-- 충돌 수정 후 --
$ git add 충돌된-파일
$ git commit -m "충돌 해결"

5. 브랜치에 변경 사항 반영

작업 브랜치로 돌아가기
$ git checkout feature-branch-name

메인 브랜치의 변경 사항을 작업 브랜치에 병합
$ git merge main

작업 브랜치의 변경사항을 다시 푸시
$ git push origin feature-branch-name
*/

깃 용어 정리
! Clone (복사하다)
: 원격 리포지토리를 로컬 컴퓨터로 '복사'

- 주로 협업자들이 같은 프로젝트에서 작업하기 위해 사용
- 원격 리포지토리와 로컬 리포지토리 간에 연결이 유지 
  , 로컬에서 작업한 내용을 원격 리포지토리에 푸시(push) 가능

! Fork (나누다)
: 다른 사용자의 리포지토리를 자신의 GitHub 계정으로 복사(작업 공간을 '나누는 것')

- 원본 리포지토리에 대한 접근 권한이 없거나 독립적으로 프로젝트를 발전시키고 싶을 때 사용
- Fork한 리포지토리는 원본 리포지토리와는 별개의 리포지토리로, 원본 리포지토리에 영향 X
  >> Pull Request를 통해 변경 사항을 원본 리포지토리에 제안 가능

# 협업 프로젝트 환경 설정 방법
: 각 팀원들이 자신의 리포지토리를 가지면서
  , 동시에 메인 프로젝트와 동기화된 상태를 유지하고 싶을 경우

? 1. 원본 리포지토리 "Fork"
: 각 팀원은 원본 리포지토리를 Fork 하여 
  자신의 GitHub 계정에 복사된 리포지토리를 생성

? 2. Fork된 리포지토리 클론
: 각 팀원은 자신의 계정에 있는 Fork된 리포지토리를 로컬로 클론

$ git clone https://github.com/your-username/repository-name.git
$ cd repository-name

? 3. 원본 리포지토리와 동기화
: 로컬 리포지토리를 원본 리포지토리와 동기화하기 위해 upstream 원격을 추가
  >> 로컬 리포지토리가 원본 리포지토리의 변경 사항을 추적 가능 
     (한 번만 수행!)

$ git remote add upstream https://github.com/original-owner/repository-name.git

? 4. 동기화 작업
: 원본 리포지토리의 변경 사항을 정기적으로 자신의 로컬 리포지토리와 동기화

$ git fetch upstream (원본 리포지토리의 변경 사항을 가져와서 로컬에 반영)
$ git checkout main 
$ git merge upstream/main (원본 리포지토리의 변경 사항을 로컬 메인 브랜치에 병합)

$ git push origin main (원본 리포지토리의 변경 사항을 동기화)

? 5. 작업 내용 푸시 (사용자 A)
: 각 팀원은 자신의 Fork된 리포지토리에서 작업하고 
  변경 사항을 자신의 GitHub 리포지토리에 푸시

$ git checkout -b userA
$ git add .
$ git commit -m "날짜 이니셜 내용"
$ git push origin userA


? 6. 사용자 A가 원본 리포지토리에 Pull Request 생성
- GitHub에서 PR 생성
- 리뷰 요청
- 병합 후 브랜치 삭제
*/
